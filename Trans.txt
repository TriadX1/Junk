//Atlas Application code
#define BLYNK_TEMPLATE_ID "TMPL2Iw7pr9GS"
#define BLYNK_TEMPLATE_NAME "Atlas"
#define BLYNK_FIRMWARE_VERSION "0.5.6"

//Include Libraries
#include "BlynkEdgent.h"
#include "arduino_secrets.h"
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <Adafruit_SSD1306.h>
#include <TimeLib.h>
#include <WidgetRTC.h>
#include <OneWire.h>
#include <DallasTemperature.h>

//Define some global variables with defaults
int daytime = 1;

float DayBedTemp = 80.0;
float DayHumidity = 50.00;
float DayAirTemp = 75.00;

float NightBedTemp = 75.0;
float NightHumidity = 50.00;
float NightAirTemp = 70.00;

float AdjustedHumidity = 0;
float AdjustedAirTemp = 0;
float AdjustedBedTemp = 0;

float CurrentBedTemp = -100;
float CurrentAirTemp = -100;
float CurrentHumidity = 0;
float CurrentAirPRessure = 0;

//time variables
int DayStartsTimeHour = 9;
int DayStartsTimeMinute = 30;

int DayStopsTimeHour = 18;
int DayStopsTimeMinute = 30;

//Map Relay to Arduino Pins
int rLEDLight = 0;     //12V relay 3
int rHumidifier = 1;   //24V relay 4
int rFreshairFan = 2;  //24v relay 5
int rBedHeater = 3;    //120V relay 6
int rUVLight = 4;      //120V relay 7
int rAirHeater = 5;    //120V relay 8

//1Wire & Bed temp sensor

int oneWireBus = 7;
OneWire oneWire(oneWireBus);
DallasTemperature sensors(&oneWire);

//set to 1 for USB serial debugging
int debug = 0;

//SETUP OLED DISPLAY STUFF
#define OLED_RESET -1     // define display reset pin
#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 64  // OLED display height, in pixels
#define SERIAL_BAUD 9600  // Sets the serail baud rate

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

//Misc Stuff

const int ledPin = LED_BUILTIN;

int rOn = LOW;
int rOff = HIGH;


//BLYNK
BlynkTimer timer;
BlynkTimer sensortimer;
BlynkTimer actionlogictimer;
BlynkTimer freshairfantimer;
BlynkTimer lighttimer;


WidgetRTC rtc;

int LEDstartHour, LEDstartMinute, LEDstopHour, LEDstopMinute;
int UVstartHour, UVstartMinute, UVstopHour, UVstopMinute;

//BME280 Stuff
#define SEALEVELPRESSURE_HPA (1013.25)
//#define BME280_I2C_ADDRESS  0x76  // define BME280 device I2C address: 0x76 or 0x77 (0x77 is library default address)
Adafruit_BME280 bme;  // I2C




// 'Untitled-1', 128x64px spalshscreen graphic (bitmap) Use http://javl.github.io/image2cpp/
const unsigned char myBitmap[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x61, 0x80, 0x01, 0xf8, 0x00, 0xfc, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x18, 0xc0, 0x00,
  0x00, 0x00, 0xf3, 0xc0, 0x03, 0xf8, 0x00, 0xfe, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x3c, 0xc0, 0x00,
  0x00, 0x00, 0xd3, 0x60, 0x03, 0x00, 0x00, 0x06, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x34, 0xc0, 0x00,
  0x00, 0x00, 0xdb, 0x60, 0x03, 0xf8, 0x00, 0x7e, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x36, 0xc0, 0x00,
  0x00, 0x00, 0xdb, 0x60, 0x03, 0xf8, 0x00, 0xfc, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x36, 0xc0, 0x00,
  0x00, 0x00, 0xcb, 0x20, 0x03, 0x00, 0x00, 0xf0, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x32, 0xc0, 0x00,
  0x00, 0x00, 0xcb, 0x30, 0x03, 0x00, 0x00, 0xfc, 0x00, 0x18, 0x00, 0x0c, 0x00, 0x32, 0xc0, 0x00,
  0x00, 0x00, 0xcf, 0x30, 0x03, 0xf8, 0x00, 0xde, 0x00, 0x1f, 0x80, 0x0c, 0x00, 0x33, 0xc0, 0x00,
  0x00, 0x00, 0xc6, 0x30, 0x01, 0xf8, 0x00, 0xc6, 0x00, 0x0f, 0x80, 0x0c, 0x00, 0x31, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x38, 0x88, 0x00, 0x00, 0x40, 0x00, 0x1c, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x24, 0x80, 0x00, 0x00, 0x40, 0x00, 0x22, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x88, 0x5a, 0x1c, 0xe3, 0x80, 0x20, 0x44, 0xe7, 0x1c, 0x2d, 0x0e, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x88, 0x6d, 0x22, 0x44, 0x40, 0x30, 0x45, 0x12, 0x22, 0x36, 0x91, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x88, 0x49, 0x0e, 0x44, 0x40, 0x1c, 0x29, 0x82, 0x22, 0x24, 0x98, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x88, 0x49, 0x12, 0x47, 0xc0, 0x0e, 0x28, 0xe2, 0x3e, 0x24, 0x8e, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x88, 0x49, 0x22, 0x44, 0x00, 0x02, 0x28, 0x12, 0x20, 0x24, 0x81, 0x00, 0x00,
  0x00, 0x00, 0x24, 0x88, 0x49, 0x26, 0x46, 0x40, 0x22, 0x39, 0x12, 0x32, 0x24, 0x91, 0x00, 0x00,
  0x00, 0x00, 0x38, 0x88, 0x49, 0x1e, 0x63, 0x80, 0x1c, 0x10, 0xe3, 0x1c, 0x24, 0x8e, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x40, 0x1b, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x20, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1c, 0xff, 0xff, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x20, 0x7b, 0xff, 0xfb, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x40, 0x3f, 0xf8, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x05, 0x50, 0x0f, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x01, 0xef, 0xec, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1b, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xb0, 0x7e, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xa0, 0x00, 0x00, 0x00, 0x07, 0x60, 0x3a, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x0f, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x0e, 0xc0, 0x07, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00,
  0x04, 0x10, 0x38, 0x07, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x5e, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
  0x02, 0x20, 0x44, 0x08, 0x80, 0x3f, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x02, 0x20, 0x04, 0x08, 0x80, 0x37, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x02, 0x20, 0x04, 0x08, 0x80, 0x1d, 0xc0, 0x00, 0x01, 0xd0, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x01, 0x40, 0x08, 0x08, 0x80, 0x0f, 0x40, 0x00, 0x03, 0x70, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00,
  0x01, 0x40, 0x18, 0x08, 0x80, 0x0f, 0xe0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x01, 0x40, 0x30, 0x08, 0x80, 0x07, 0xf0, 0x00, 0x0f, 0x60, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x40, 0x48, 0x80, 0x03, 0xd8, 0x00, 0x0e, 0xc0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x7c, 0x47, 0x00, 0x01, 0xec, 0x00, 0x3b, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xc3, 0xee, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0xff, 0xb6, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0xaa, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf5, 0x38, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xdf, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xef, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x08, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00
};

//-----------------------------------------------------------------------------------------------------------------
void setup() {
  BlynkEdgent.begin();
  Serial.begin(SERIAL_BAUD);

  unsigned status;

  //Setup the built in LED
  pinMode(ledPin, OUTPUT);

  WiFiDrv::pinMode(25, OUTPUT);
  WiFiDrv::pinMode(26, OUTPUT);
  WiFiDrv::pinMode(27, OUTPUT);
  // End Setup the built in LED


  //Setup 8 Relay Module

  pinMode(rLEDLight, OUTPUT);
  pinMode(rHumidifier, OUTPUT);
  pinMode(rFreshairFan, OUTPUT);
  pinMode(rBedHeater, OUTPUT);
  pinMode(rUVLight, OUTPUT);
  pinMode(rAirHeater, OUTPUT);

  //End Setup 8 Relay Module

  //OneWireStuff

  //OLED

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize the SSD1306 OLED display with I2C address = 0x3D
  // clear the display buffer.
  display.clearDisplay();                              // Make sure the display is cleared
  display.drawBitmap(0, 0, myBitmap, 128, 64, WHITE);  // drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
  display.display();                                   // Update the display
  delay(3000);

  // clear the display buffer.
  display.clearDisplay();
  display.setTextSize(1);              // text size = 1
  display.setTextColor(WHITE, BLACK);  // set text color to white and black background
  display.setTextWrap(false);          // disable text wrap

  //OLED

  //Time Stuff
  setSyncInterval(10 * 60);  // Sync interval in seconds (10 minutes)


  // T I M E R S
  timer.setInterval(10000L, clockDisplay);
  sensortimer.setInterval(1000L, readSensors);
  actionlogictimer.setInterval(3000L, actionlogic);
  freshairfantimer.setInterval(1800000L, freshair);
  lighttimer.setInterval(5000L, checkTime);  // Check time every 5 seconds (This is close enough)


  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("Setting up bme280");
  display.setCursor(0, 20);
  display.print("-------------");
  display.display();  // update the display

  status = bme.begin(0x76);
  // You can also pass in a Wire library object like &Wire2
  // status = bme.begin(0x76, &Wire2)
  if (!status) {
    if (debug = 1) {
      Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
      Serial.print("SensorID was: 0x");
      Serial.println(bme.sensorID(), 16);
      Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
      Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
      Serial.print("        ID of 0x60 represents a BME 280.\n");
      Serial.print("        ID of 0x61 represents a BME 680.\n");
    }
    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("bme280 Failure");
    display.setCursor(0, 20);
    display.print("-------------");
    display.display();  // update the display
    while (1) delay(10);
  }

  //Start with everything off by setting pins to rOff aka HIGH
  digitalWrite(rLEDLight, rOff);
  digitalWrite(rHumidifier, rOff);
  digitalWrite(rFreshairFan, rOff);
  digitalWrite(rBedHeater, rOff);
  digitalWrite(rUVLight, rOff);
  digitalWrite(rAirHeater, rOff);

  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("Boot Complete");
  display.setCursor(0, 20);
  display.print("Entering Run Mode");
  display.display();  // update the display
}

BLYNK_WRITE(V40) {
  TimeInputParam t(param);
  LEDstartHour = t.getStartHour();
  LEDstartMinute = t.getStartMinute();
  LEDstopHour = t.getStopHour();
  LEDstopMinute = t.getStopMinute();
}

BLYNK_WRITE(V41) {
  TimeInputParam t(param);
  UVstartHour = t.getStartHour();
  UVstartMinute = t.getStartMinute();
  UVstopHour = t.getStopHour();
  UVstopMinute = t.getStopMinute();
}
//-----------------------------------------------------------------------------------------------------------------
void loop() {
  BlynkEdgent.run();
  timer.run();
  sensortimer.run();
  actionlogictimer.run();
  freshairfantimer.run();
  lighttimer.run();
  displayValues();  //Updates Displays (OLED AND BLYNK)
}

//Setting from Blynk App
BLYNK_WRITE(V30) {
  //reads the slider value when it changes in the app
  DayHumidity = param.asInt();
}

BLYNK_WRITE(V31) {
  //reads the slider value when it changes in the app
  NightHumidity = param.asInt();
}

BLYNK_WRITE(V32) {
  //reads the slider value when it changes in the app
  DayAirTemp = param.asInt();
}

BLYNK_WRITE(V33) {
  //reads the slider value when it changes in the app
  NightAirTemp = param.asInt();
}

BLYNK_WRITE(V34) {
  //reads the slider value when it changes in the app
  DayBedTemp = param.asInt();
}

BLYNK_WRITE(V35) {
  //reads the slider value when it changes in the app
  NightBedTemp = param.asInt();
}

//-----------------------------------------------------------------------------------------------------------------


void readSensors() {
  sensors.requestTemperatures();
  CurrentBedTemp = sensors.getTempCByIndex(0) * 9 / 5 + 32;
  CurrentAirTemp = bme.readTemperature() * 9 / 5 + 32;
  CurrentHumidity = bme.readHumidity();
  CurrentAirPRessure = bme.readPressure();
}

void displayValues() {

  //need to setup the datastreams in Blynk, add them to the app.
  //realtime Status
  Blynk.virtualWrite(V10, !digitalRead(rLEDLight));
  Blynk.virtualWrite(V11, !digitalRead(rHumidifier));
  Blynk.virtualWrite(V12, !digitalRead(rFreshairFan));
  Blynk.virtualWrite(V13, !digitalRead(rBedHeater));
  Blynk.virtualWrite(V14, !digitalRead(rUVLight));
  Blynk.virtualWrite(V15, !digitalRead(rAirHeater));


  int displayCycles = displayCycles + 1;

  if (displayCycles == 5) {
    display.clearDisplay();                              // Make sure the display is cleared
    display.drawBitmap(0, 0, myBitmap, 128, 64, WHITE);  // drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
    display.display();                                   // Update the display
    displayCycles = 0;
  }

  Blynk.virtualWrite(V5, CurrentAirPRessure);
  Blynk.virtualWrite(V1, CurrentAirTemp);
  Blynk.virtualWrite(V0, CurrentHumidity);

  delay(2000);

  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0, (displayCycles * 4));
  display.print("Air Temp");
  display.setCursor(0, 20 + (displayCycles * 4));
  display.print(CurrentAirTemp);
  display.display();  // update the display

  delay(2000);

  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0, (displayCycles * 4));
  display.print("Humidity");
  display.setCursor(0, 20 + (displayCycles * 4));
  display.print(CurrentHumidity);
  display.display();  // update the display

  delay(2000);

  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0, (displayCycles * 4));
  display.print("Bed Temp");
  display.setCursor(0, 20 + (displayCycles * 4));
  display.print(CurrentBedTemp);
  display.display();  // update the display
}

void freshair() {
  digitalWrite(rFreshairFan, rOn);
  delay(5000);
  digitalWrite(rFreshairFan, rOff);
}

void actionlogic() {

  //Ned to add code to see if it is day or night thenuse the corresponding values instead of the hard coded values.  These values should be read from Blink

  daytime = ((digitalRead(rLEDLight) == rOn) || (digitalRead(rUVLight) == rOn));

  //AirTemp hot or too humid  (Maybe do some other logic here) ----------------------------------
  if ((CurrentAirTemp > 95) || (CurrentHumidity > 80)) {
    digitalWrite(rFreshairFan, rOn);
    digitalWrite(rHumidifier, rOff);
  } else {
    digitalWrite(rFreshairFan, rOff);
  }

  //AirTemp cold --------------------------------------------------------------------

  if (daytime) {
      AdjustedAirTemp = DayAirTemp;
    }
  else {
    AdjustedAirTemp = NightAirTemp;
  }

Blynk.virtualWrite(V16, "Air Temp Current Target: " + String(AdjustedAirTemp) + "°F");

  if (CurrentAirTemp < AdjustedAirTemp) {
    digitalWrite(rAirHeater, rOn);
  } else {
    digitalWrite(rAirHeater, rOff);
  }

  //Humidify low --------------------------------------------------------------------

  if (daytime) {
      AdjustedHumidity = DayHumidity;
    }
  else {
    AdjustedHumidity = NightHumidity;
  }

  Blynk.virtualWrite(V16, "Humidity Current Target: " + String(AdjustedHumidity) + "%");

  if (CurrentHumidity < AdjustedHumidity) {
    digitalWrite(rHumidifier, rOn);
  } else {
    digitalWrite(rHumidifier, rOff);
  }

  //HeatBed --------------------------------------------------------------------
    if (daytime) {
      AdjustedBedTemp = DayBedTemp;
    }
  else {
    AdjustedBedTemp = NightBedTemp;
  }

  Blynk.virtualWrite(V16, "Bed Temp Current Target: " + String(AdjustedBedTemp) + "°F");
  
  if (CurrentBedTemp < AdjustedBedTemp) {
    digitalWrite(rBedHeater, rOn);
  } else {
    digitalWrite(rBedHeater, rOff);
  }
}

// Digital clock display of the time
void clockDisplay() {
  // You can call hour(), minute(), ... at any time
  // Please see Time library examples for details

  String currentTime = String(hour()) + ":" + minute() + ":" + second();
  String currentDate = String(month()) + "/" + day() + "/" + year();

  // Send time to the App
  Blynk.virtualWrite(V3, currentTime);
  // Send date to the App
  Blynk.virtualWrite(V4, currentDate);
}

BLYNK_CONNECTED() {                   //When device is connected to server...
  Blynk.sendInternal("rtc", "sync");  //request current local time for device
  //When Blynk connects, get the settings values.
}

void checkTime() {
  //if (Blynk.connected()) {
  //  Blynk.syncVirtual(V1);  // Update RTC widget, if you set it to Virtual pin V1
  //}

  int currentMinute = minute();
  int currentHour = hour();

  // LED Light control based on start and stop times from Time Input widget
  if ((currentHour > LEDstartHour || (currentHour == LEDstartHour && currentMinute >= LEDstartMinute)) && (currentHour < LEDstopHour || (currentHour == LEDstopHour && currentMinute <= LEDstopMinute))) {
    digitalWrite(rLEDLight, rOn);
  } else {
    digitalWrite(rLEDLight, rOff);
  }

  // UV Light control based on start and stop times from Time Input widget
  if ((currentHour > UVstartHour || (currentHour == UVstartHour && currentMinute >= UVstartMinute)) && (currentHour < UVstopHour || (currentHour == UVstopHour && currentMinute <= UVstopMinute))) {
    digitalWrite(rUVLight, rOn);
  } else {
    digitalWrite(rUVLight, rOff);
  }
}
